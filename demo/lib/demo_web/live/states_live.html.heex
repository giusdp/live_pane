<div class="mx-auto w-full min-w-0 max-w-3xl pt-8">
  <header class="prose relative mb-4 max-w-3xl border-b border-border pb-8  ">
    <p class="mb-4 text-sm/6 font-medium capitalize text-accent-foreground"></p>

    <h1 class="mb-6 scroll-m-20 text-4xl font-bold tracking-tight">
      Style and React to Pane States
    </h1>

    <p class="mt-2 text-balance text-lg text-muted-foreground">
      An example of how to style and use JS commands with the pane states.
    </p>
  </header>

  <div class="markdown prose relative max-w-3xl pt-4">
    <p class="leading-7 [&amp;:not(:first-child)]:mt-6">
      The <code>pane</code> component goes through different states when programmatically
      resized or collapsed: <code>collapsing</code>, <code>expanding</code>, <code>collapsed</code>, and <code>expanded</code>.
      These states are used to dynamically update a specific attribute: <code>data-pane-state</code>.
    </p>

    <p>
      You can attach your own styling to the pane using the
      <code>data-[pane-state=state]:myclass</code>
      (in Tailwind) in order to style depending on the state. In the example below, we add a transition
      animation to the pane when it is collapsing or expanding by using the
      <code>data-[pane-state=collapsing]:transition-[flex-grow]</code>
      and <code>data-[pane-state=expanding]:transition-[flex-grow]</code>
      classes (among other things).
    </p>

    <p>
      In addition, the Elixir components also have a <code>on_collapse</code>
      and <code>on_expand</code>
      attributes which can be used to trigger JS commands when the pane is collapsed or gets expanded.
    </p>
    <p>
      In the example, we have:
      <div id="example" phx-hook="Highlight" phx-update="ignore" class="bg-inherit -mt-8">
        <pre class="p-0 bg-inherit">
        <code class="language-elixir p-0" >
          <%= """
          on_collapse={JS.push("collapsed", value: %{pane: "demo_pane_1"}) |> JS.add_class(...)}
          on_expand={JS.push("expanded", value: %{pane: "demo_pane_1"}) |> JS.remove_class(...)}

          """ %></code></pre>
      </div>
    </p>
    <p class="mb-10">
      We send an event to the LiveView when the pane is collapsed or expanded with a payload containing
      the id so we can identify which pane was collapsed or expanded. We react to this event by updating the
      button text to the correct action.
    </p>
    <button
      class="mb-4 no-underline inline-flex items-center justify-center whitespace-nowrap rounded-md
            text-sm font-medium border transition-colors shadow-sm
            active:text-zinc-800 h-9 px-5 py-1 !bg-zinc-50 !border-zinc-200/50 !text-brand  hover:!bg-zinc-100"
      phx-click="toggle"
    >
      <%= if !@collapsed do %>
        Collapse 1
      <% else %>
        Expand 1
      <% end %>
    </button>
    <button
      class="mb-4 no-underline inline-flex items-center justify-center whitespace-nowrap rounded-md
            text-sm font-medium border transition-colors shadow-sm
            active:text-zinc-800 h-9 px-5 py-1 !bg-zinc-50 !border-zinc-200/50 !text-brand  hover:!bg-zinc-100"
      phx-click="toggle3"
    >
      <%= if !@collapsed3 do %>
        Collapse 3
      <% else %>
        Expand 3
      <% end %>
    </button>
    <LivePane.group id="demo4" class="h-[450px] border-2 border-gray-300 rounded-lg bg-inherit">
      <LivePane.pane
        collapsible={true}
        collapsed_size={5}
        min_size={15}
        starting_size={5}
        group_id="demo4"
        id="demo_pane_1"
        class="
          h-full bg-gray-100 data-[pane-state=collapsing]:bg-red-200 data-[pane-state=collapsed]:bg-red-200
          dta-[pane-state=collapsing]:transition-[flex-grow,background-color] data-[pane-state=collapsing]:duration-1000
          data-[pane-state=collapsing]:ease-linear data-[pane-state=collapsing]:will-change-[flex-grow,background-color]
          data-[pane-state=expanding]:bg-gray-100 data-[pane-state=expanding]:transition-[flex-grow,background-color]
          data-[pane-state=expanding]:duration-1000 data-[pane-state=expanding]:ease-linear
          data-[pane-state=expanding]:will-change-[flex-grow,background-color]
        "
        on_collapse={
          JS.push("collapsed", value: %{pane: "demo_pane_1"})
          |> JS.add_class("text-xs [writing-mode:vertical-lr] pr-4")
        }
        on_expand={
          JS.push("expanded", value: %{pane: "demo_pane_1"})
          |> JS.remove_class("text-xs [writing-mode:vertical-lr] pr-4")
        }
      >
        <div class="flex h-full items-center justify-center rounded-lg p-6">
          <span class="font-semibold">
            I collapse!
          </span>
        </div>
      </LivePane.pane>

      <LivePane.resizer
        id="demo4-resizer"
        group_id="demo4"
        class="relative flex h-full w-2 items-center justify-center"
      >
        <div class="z-10 h-7 flex items-center w-4 rounded-sm border bg-brand">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="1em"
            height="1em"
            fill="currentColor"
            viewBox="0 0 256 256"
            class="size-4 text-black"
          >
            <rect width="256" height="256" fill="none"></rect>
            <path d="M108,60A16,16,0,1,1,92,44,16,16,0,0,1,108,60Zm56,16a16,16,0,1,0-16-16A16,16,0,0,0,164,76ZM92,112a16,16,0,1,0,16,16A16,16,0,0,0,92,112Zm72,0a16,16,0,1,0,16,16A16,16,0,0,0,164,112ZM92,180a16,16,0,1,0,16,16A16,16,0,0,0,92,180Zm72,0a16,16,0,1,0,16,16A16,16,0,0,0,164,180Z">
            </path>
          </svg>
        </div>
      </LivePane.resizer>
      <LivePane.pane
        starting_size={50}
        group_id="demo4"
        id="demo_pane_2"
        class="h-full bg-gray-100"
      >
        <div class="flex h-full items-center justify-center rounded-lg p-6">
          <span class="font-semibold">I don't.</span>
        </div>
      </LivePane.pane>
      <LivePane.resizer
        id="demo4-resizer2"
        group_id="demo4"
        class="relative flex h-full w-2 items-center justify-center"
      >
        <div class="z-10 h-7 flex items-center w-4 rounded-sm border bg-brand">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="1em"
            height="1em"
            fill="currentColor"
            viewBox="0 0 256 256"
            class="size-4 text-black"
          >
            <rect width="256" height="256" fill="none"></rect>
            <path d="M108,60A16,16,0,1,1,92,44,16,16,0,0,1,108,60Zm56,16a16,16,0,1,0-16-16A16,16,0,0,0,164,76ZM92,112a16,16,0,1,0,16,16A16,16,0,0,0,92,112Zm72,0a16,16,0,1,0,16,16A16,16,0,0,0,164,112ZM92,180a16,16,0,1,0,16,16A16,16,0,0,0,92,180Zm72,0a16,16,0,1,0,16,16A16,16,0,0,0,164,180Z">
            </path>
          </svg>
        </div>
      </LivePane.resizer>
      <LivePane.pane
        starting_size={50}
        collapsible={true}
        collapsed_size={5}
        min_size={15}
        group_id="demo4"
        id="demo_pane_3"
        class="h-full bg-gray-100"
        on_collapse={JS.push("collapsed", value: %{pane: "demo_pane_3"})}
        on_expand={JS.push("expanded", value: %{pane: "demo_pane_3"})}
      >
        <div class="flex h-full items-center justify-center rounded-lg p-6">
          <span class="font-semibold">I do.</span>
        </div>
      </LivePane.pane>
    </LivePane.group>

    <p class="mt-12 mb-2">
      The collapsible panes (first and third) have a min_size of 15% and a collapsed size of 5%.
    </p>
  </div>
</div>
